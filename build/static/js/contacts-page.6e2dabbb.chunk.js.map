{"version":3,"sources":["components/ContactsList/ContactList.jsx","components/ContactListItem/ContactsListItem.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"names":["ContactsList","children","className","ContactsListItem","dispatch","useDispatch","contactsItems","useSelector","getFilteredContactList","map","id","name","number","type","onClick","removeContact","onDelete","ContactForm","nameInputId","nanoid","numberInputId","useState","setName","handleChangeName","useCallback","event","target","value","setNumber","handleChangeNumber","items","getItems","handleSubmit","preventDefault","some","contact","alert","addContact","onSubmit","htmlFor","pattern","title","required","onChange","Filter","getFilterValue","addFilter","ContactsPage","useEffect","fetchContacts","isLoading","getLoadingItems","length","Spinner","animation"],"mappings":"gVAWeA,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACnB,oBAAIC,UAAU,eAAd,SAA8BD,K,iCCIjB,SAASE,IACtB,IAAMC,EAAWC,cACXC,EAAgBC,YAAYC,KAGlC,OACE,mCACGF,EAAcG,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC9B,OACE,qBAAaV,UAAU,mBAAvB,UACGS,EADH,KACWC,EACT,wBAAQC,KAAK,SAASC,QAAS,kBARxB,SAAAJ,GAAE,OAAIN,EAASW,YAAcL,IAQCM,CAASN,IAA9C,SACE,cAAC,IAAD,QAHKA,Q,4BCVJ,SAASO,IACtB,IAAMb,EAAWC,cACXa,EAAcC,cACdC,EAAgBD,cAEtB,EAAwBE,mBAAS,IAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACMC,EAAmBC,uBAAY,SAAAC,GACnCH,EAAQG,EAAMC,OAAOC,SACpB,IAEH,EAA4BN,mBAAS,IAArC,mBAAOT,EAAP,KAAegB,EAAf,KACMC,EAAqBL,uBAAY,SAAAC,GACrCG,EAAUH,EAAMC,OAAOC,SACtB,IAEGG,EAAQvB,YAAYwB,KAEpBC,EAAeR,uBACnB,SAAAC,GACEA,EAAMQ,iBAIFH,EAAMI,MAHW,SAAAC,GAAO,OAC1BA,EAAQxB,OAASA,GAAQwB,EAAQvB,SAAWA,KAG5CwB,MAAM,mCAGRhC,EAASiC,YAAW,CAAE1B,OAAMC,YAE5BU,EAAQ,IACRM,EAAU,OAEZ,CAACxB,EAAU0B,EAAOnB,EAAMC,IAG1B,OACE,uBAAMV,UAAU,cAAcoC,SAAUN,EAAxC,UACE,qBAAK9B,UAAU,eAAf,SACE,oBAAIA,UAAU,QAAd,yBAGF,uBAAOqC,QAASrB,EAAhB,kBACA,uBACEL,KAAK,OACLc,MAAOhB,EACPA,KAAK,OACL6B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUpB,EACVb,GAAIQ,IAEN,uBAAOqB,QAASnB,EAAhB,oBACA,uBACEP,KAAK,MACLF,KAAK,SACLgB,MAAOf,EACP4B,QAAQ,+FACRC,MAAM,mlBACNC,UAAQ,EACRC,SAAUd,EACVnB,GAAIU,IAEN,wBAAQP,KAAK,SAAb,4B,OChES,SAAS+B,IACtB,IAAMxC,EAAWC,cACXsB,EAAQpB,YAAYsC,KACpBF,EAAWnB,uBACf,SAAAC,GAAK,OAAIrB,EAAS0C,YAAUrB,EAAMC,OAAOC,UACzC,CAACvB,IAGH,OACE,wBAAOF,UAAU,SAAjB,iCAEE,uBAAOW,KAAK,OAAOc,MAAOA,EAAOgB,SAAUA,O,mCCElC,SAASI,IACtB,IAAM3C,EAAWC,cAEjB2C,qBAAU,WACR5C,EAAS6C,iBACR,CAAC7C,IAEJ,IAAM0B,EAAQvB,YAAYwB,KACpBmB,EAAY3C,YAAY4C,KAE9B,OACE,kCACE,sBAAKjD,UAAU,mBAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,QAAd,sBAEC4B,EAAMsB,OAAS,EACd,qCACE,cAAC,EAAD,IAEA,eAAC,EAAD,WACGF,GAAa,cAACG,EAAA,EAAD,CAASC,UAAU,WACjC,cAAC,EAAD,UAIJ","file":"static/js/contacts-page.6e2dabbb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './ContactsList.scss';\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"ContactsList\">{children}</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from 'prop-types';\r\nimport { useCallback, useReducer } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { removeContact, getFilteredContactList } from '../../redux/contacts';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\nimport './ContactsListItem.scss';\r\n\r\nexport default function ContactsListItem() {\r\n  const dispatch = useDispatch();\r\n  const contactsItems = useSelector(getFilteredContactList);\r\n  const onDelete = id => dispatch(removeContact(id));\r\n\r\n  return (\r\n    <>\r\n      {contactsItems.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className=\"ContactsListItem\">\r\n            {name}: {number}\r\n            <button type=\"button\" onClick={() => onDelete(id)}>\r\n              <DeleteForeverIcon />\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n","import React, { useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport { addContact, getItems } from '../../redux/contacts';\r\n\r\nimport './ContactForm.scss';\r\n\r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch();\r\n  const nameInputId = nanoid();\r\n  const numberInputId = nanoid();\r\n\r\n  const [name, setName] = useState('');\r\n  const handleChangeName = useCallback(event => {\r\n    setName(event.target.value);\r\n  }, []);\r\n\r\n  const [number, setNumber] = useState('');\r\n  const handleChangeNumber = useCallback(event => {\r\n    setNumber(event.target.value);\r\n  }, []);\r\n\r\n  const items = useSelector(getItems);\r\n\r\n  const handleSubmit = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n      const isInContacts = contact =>\r\n        contact.name === name || contact.number === number;\r\n\r\n      if (items.some(isInContacts)) {\r\n        alert(`Contact is already in contacts`);\r\n        return;\r\n      }\r\n      dispatch(addContact({ name, number }));\r\n\r\n      setName('');\r\n      setNumber('');\r\n    },\r\n    [dispatch, items, name, number],\r\n  );\r\n\r\n  return (\r\n    <form className=\"ContactForm\" onSubmit={handleSubmit}>\r\n      <div className=\"TitleWrapper\">\r\n        <h1 className=\"Title\">Phonebook</h1>\r\n      </div>\r\n\r\n      <label htmlFor={nameInputId}>Name</label>\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={handleChangeName}\r\n        id={nameInputId}\r\n      />\r\n      <label htmlFor={numberInputId}>Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        value={number}\r\n        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n        required\r\n        onChange={handleChangeNumber}\r\n        id={numberInputId}\r\n      />\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n","import { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addFilter, getFilterValue } from '../../redux/contacts';\r\n\r\nimport './Filter.scss';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilterValue);\r\n  const onChange = useCallback(\r\n    event => dispatch(addFilter(event.target.value)),\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <label className=\"Filter\">\r\n      Find contact by name\r\n      <input type=\"text\" value={value} onChange={onChange}></input>\r\n    </label>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport ContactsList from '..//..//components/ContactsList';\r\nimport ContactsListItem from '..//..//components/ContactListItem';\r\nimport ContactForm from '..//..//components/ContactForm';\r\nimport Filter from '..//..//components/Filter';\r\n\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { fetchContacts } from '..//..//redux/contacts/contacts-operations';\r\n\r\nimport {\r\n  getItems,\r\n  getLoadingItems,\r\n} from '../../redux/contacts/contacts-selectors';\r\n\r\nimport './ContactsPage.scss';\r\n\r\nexport default function ContactsPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const items = useSelector(getItems);\r\n  const isLoading = useSelector(getLoadingItems);\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"PhonebookWrapper\">\r\n        <ContactForm />\r\n        <div className=\"ContactsWrapper\">\r\n          <h2 className=\"Title\">Contacts</h2>\r\n\r\n          {items.length > 0 ? (\r\n            <>\r\n              <Filter />\r\n\r\n              <ContactsList>\r\n                {isLoading && <Spinner animation=\"border\" />}\r\n                <ContactsListItem />\r\n              </ContactsList>\r\n            </>\r\n          ) : (\r\n            <span>You have no contacts yet </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\n// class ContactsPage extends Component {\r\n//   componentDidMount() {\r\n//     this.props.fetchItems();\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <section>\r\n//         <div className=\"PhonebookWrapper\">\r\n//           <ContactForm />\r\n//           <div className=\"ContactsWrapper\">\r\n//             <h2 className=\"Title\">Contacts</h2>\r\n\r\n//             {this.props.items.length > 0 ? (\r\n//               <>\r\n//                 <Filter />\r\n\r\n//                 <ContactsList>\r\n//                   {this.props.isLoading && <Spinner animation=\"border\" />}\r\n//                   <ContactsListItem />\r\n//                 </ContactsList>\r\n//               </>\r\n//             ) : (\r\n//               <span>You have no contacts yet </span>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       </section>\r\n//     );\r\n//   }\r\n// }\r\n// const mapStateToProps = state => ({\r\n//   items: getItems(state),\r\n//   isLoading: getLoadingItems(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   fetchItems: () => dispatch(fetchContacts()),\r\n\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsPage);\r\n"],"sourceRoot":""}